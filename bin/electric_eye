#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'construct'
require 'electric_eye.rb'
include ElectricEye

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |camera, url| # Add args you want: |like,so|
    # Check that the directory exists
    check_config
    
    # Add a camera
    if options[:a]
      add_camera(camera,url)
    elsif options[:r]
      remove_camera(camera)
    end
    
    exit 0
  end

  def self.check_config
    # Check if we have a config CONFIG_FILE
    ConfigEye.check_dir
    if File.exist?(CONFIG_FILE)
      @config = Construct.load File.read(CONFIG_FILE)
    else
      @config = Construct.new
      @config.cameras = []
    end
  end
  
  def self.add_camera(camera,url)
    @config.cameras.push({name: camera, url: url})
    ConfigEye.save(@config)
    info "Camera added"
  end

  def self.remove_camera(camera)
    record = @config.cameras.bsearch{ |c| c[:name] == camera }
    if record
      @config.cameras.delete(record)
      ConfigEye.save(@config)
    end
    info "Camera removed"
  end
  
  # supplemental methods here

  # Declare command-line interface here

  description "Network Video Recorder"

  #
  # Accept flags via:
  on("-a", "--add", "Add a camera") 
  on("-r", "--remove", "Remove a camera") 

  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional
  arg :camera, :optional
  arg :url, :optional

  version ElectricEye::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
